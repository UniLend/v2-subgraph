type FlashLoan @entity(immutable: true) {
  id: Bytes!
  _target: Bytes! # address
  _reserve: Bytes! # address
  _amount: BigInt! # int256
  _totalFee: BigInt! # uint256
  _protocolFee: BigInt! # uint256
  _timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewDefaultInterestRateAddress @entity(immutable: true) {
  id: Bytes!
  _address: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewDefaultMarketConfig @entity(immutable: true) {
  id: Bytes!
  _ltv: Int! # uint8
  _lb: Int! # uint8
  _rf: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewGovernorAddress @entity(immutable: true) {
  id: Bytes!
  _address: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewOracleAddress @entity(immutable: true) {
  id: Bytes!
  _address: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewPositionAddress @entity(immutable: true) {
  id: Bytes!
  _address: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Token @entity {
  # token address
  id: Bytes!
  # token symbol
  symbol: String!
  # token name
  name: String!
  # token decimals
  decimals: Int!
  # transactions across all pools that include this token
  txCount: BigInt!
  # number of pools containing this token
  poolCount: BigInt!
  # liquidity across all pools in token units
  totalPoolsLiquidity: BigDecimal!
  # liquidity across all pools in derived USD
  totalPoolsLiquidityUSD: BigDecimal!
  # price in usd
  priceUSD: BigDecimal!
  # number of times token lent in all pools
  lentCount: BigInt!
  # number of times token borrowed in all pools
  borrowCount: BigInt!

  oracleSource: Bytes 
}

type Protocol @entity {
  " Core contract or comptroller address"
  id: Bytes!
  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Number of cumulative depositors "
  cumulativeUniqueDepositors: Int!

  " Number of cumulative borrowers "
  cumulativeUniqueBorrowers: Int!

  " Number of cumulative liquidators (accounts that performed liquidation) "
  cumulativeUniqueLiquidators: Int!

  " Number of cumulative liquidatees (accounts that got liquidated) "
  cumulativeUniqueLiquidatees: Int!

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUSD: BigDecimal!

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  cumulativeLendSideRevenueUSD: BigDecimal!

  " Sum of all historical deposits in USD (only considers Lent) "
  cumulativeLendUSD: BigDecimal!

  " Sum of all historical borrows in USD (only considered Borrow i.e total historical borrow amount). "
  cumulativeBorrowUSD: BigDecimal!

  " Sum of all historical liquidations in USD "
  cumulativeLiquidateUSD: BigDecimal!

  " Total number of pools "
  totalPoolCount: Int!

  " Total number of open positions "
  openPositionCount: Int!

  " Total number of positions (open and closed) "
  cumulativePositionCount: Int!

  # " Daily usage metrics for this protocol "
  # dailyUsageMetrics: [UsageMetricsDailySnapshot!]!
  #   @derivedFrom(field: "protocol")

  # " Hourly usage metrics for this protocol "
  # hourlyUsageMetrics: [UsageMetricsHourlySnapshot!]!
  #   @derivedFrom(field: "protocol")

  # " Daily financial metrics for this protocol "
  # financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")
}

# type UsageMetricsDailySnapshot @entity {
#   " ID is # of days since Unix epoch time "
#   id: ID!

#   " Number of unique daily active users "
#   dailyActiveUsers: Int!

#   " Number of cumulative unique users "
#   cumulativeUniqueUsers: Int!

#   # " Number of unique daily depositors "
#   # dailyActiveDepositors: Int!

#   " Number of cumulative depositors "
#   cumulativeUniqueLenders: Int!

#   # " Number of unique daily borrowers "
#   # dailyActiveBorrowers: Int!

#   " Number of cumulative borrowers "
#   cumulativeUniqueBorrowers: Int!

#   # " Number of unique daily liquidators (accounts that performed liquidation) "
#   # dailyActiveLiquidators: Int!

#   " Number of cumulative liquidators (accounts that performed liquidation) "
#   cumulativeUniqueLiquidators: Int!

#   # " Number of unique daily liquidatees (accounts that got liquidated) "
#   # dailyActiveLiquidatees: Int!

#   " Number of cumulative liquidatees (accounts that got liquidated) "
#   cumulativeUniqueLiquidatees: Int!

#   " Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface. "
#   dailyTransactionCount: Int!

#   " Total number of deposits in a day "
#   dailyLendCount: Int!

#   " Total number of withdrawals in a day "
#   dailyRedeemCount: Int!

#   " Total number of borrows/mints in a day "
#   dailyBorrowCount: Int!

#   " Total number of repayments/burns in a day "
#   dailyRepayCount: Int!

#   " Total number of liquidations in a day "
#   dailyLiquidateCount: Int!

#   " Total number of pools "
#   totalPoolCount: Int!

#   " Block number of this snapshot "
#   blockNumber: BigInt!

#   " Timestamp of this snapshot "
#   timestamp: BigInt!
# }

type Pool @entity {
  id: Bytes!
  " Token 0 "
  token0: Token!

  " Token 1 "
  token1: Token!

  " Pool addresss "
  pool: Bytes!

  " pool sr no "
  poolNo: BigInt!

  " block pool was created at "
  blockNumber: BigInt!

  " creation "
  blockTimestamp: BigInt!

  # in range liquidity
  liquidity0: BigDecimal!

  liquidity1: BigDecimal!

  # all time number of transactions
  # it will come from all lend borrow repay redeem
  txCount: BigInt!

  " token0 lend apy "
  lendApy0: BigDecimal!

  " token1 lend apy "
  lendApy1: BigDecimal!

  " token0 borrow apy "
  borrowApy0: BigDecimal!

  " Token1 borrow apy "
  borrowApy1: BigDecimal!

  " Total borrow of token0 "
  totalBorrow0: BigDecimal!

  " Total borrow of token1 "
  totalBorrow1: BigDecimal!

  " Interst on token0 "
  interest0: BigDecimal!

  " Interst on token1 "
  interest1: BigDecimal!

  " Max ltv "
  maxLTV: BigInt!

  # it will be added in poolcreation
  " Liquidation Bonus "
  lB: BigInt!

  " reserve factor "
  rf: BigInt!

  " Utilization rate of token0 "
  UtilizationRate0: BigDecimal!

  " Utilization rate of token1 "
  UtilizationRate1: BigDecimal!

  # " All interest rates / fees allowed in the Pool. Interest rate should be in APY percentage "
  # rates: [InterestRate!]!

  " Current TVL (liquidity0+liquidity1) of this Pool "
  totalValueLockedUSD: BigDecimal!

  " All revenue generated by the Pool, accrued to the supply side. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Current balance of all Lent assets (not historical cumulative), in USD (all liquidity in usd) "
  totalLendBalanceUSD: BigDecimal!

  " Sum of all historical deposits in USD (only considers deposits and not withdrawals) "
  cumulativeLendUSD: BigDecimal!

  " Current balance of all borrowed/minted assets (not historical cumulative), in USD "
  totalBorrowBalanceUSD: BigDecimal!

  " Sum of all historical borrows/mints in USD (i.e. total loan origination) "
  cumulativeBorrowUSD: BigDecimal!

  " Sum of all historical liquidations in USD "
  cumulativeLiquidateUSD: BigDecimal!

  # " Relative token0 price "
  # relativeToken0Price: BigDecimal!

  # " Relative token1 price "
  # relativeToken1Price: BigDecimal!

  # " hourly snapshots of pool data "
  # # poolHourData: [PoolHourData!]! @derivedFrom(field: "pool")

  " daily snapshots of pool data "
  PoolDailySnapshot: [PoolDailySnapshot!]! @derivedFrom(field: "pool")

  # when pool is created
  " Transaction Hash of pool created "
  transactionHash: Bytes!

  ##### Account/Position Data #####

  " All positions in this market "
  positions: [Position!]! @derivedFrom(field: "pool")

  " Number of positions in this market "
  positionCount: Int!

  " Number of open positions in this market "
  openPositionCount: Int!

  " Number of closed positions in this market "
  closedPositionCount: Int!

  " Number of lending positions in this market "
  lendingPositionCount: Int!

  " Number of borrowing positions in this market "
  borrowingPositionCount: Int!

  ##### Events #####
  # these are all derived fields cannot be set manually

  " All Lends made to this poolCreated "
  lends: [Lend!]! @derivedFrom(field: "pool")

  " All Redeem made from this poolCreated "
  redeem: [Redeem!]! @derivedFrom(field: "pool")

  " All borrows from this poolCreated "
  borrows: [Borrow!]! @derivedFrom(field: "pool")

  " All repayments to this poolCreated "
  repays: [Repay!]! @derivedFrom(field: "pool")

  # " All liquidations made to this poolCreated "
  # liquidates: [Liquidate!]! @derivedFrom(field: "poolCreated")
}

type Position @entity {
  " Position Side "
  id: ID!

  " Account that owns this position "
  owner: Bytes!

  " The pool in which this position was opened "
  pool: Pool!

  " Token0 data "
  token0: Token!

  " Token1 data "
  token1: Token!

  " The hash of the transaction that opened this position "
  hashOpened: Bytes!

  " The hash of the transaction that closed this position "
  hashClosed: Bytes

  " Block number of when the position was opened "
  blockNumberOpened: BigInt!

  " Timestamp when the position was opened "
  timestampOpened: BigInt!

  # " Relative token0 price "
  # relativeToken0Price: BigDecimal!

  # " Relative token1 price "
  # relativeToken1Price: BigDecimal!

  " Block number of when the position was closed (0 if still open) "
  blockNumberClosed: BigInt

  " Timestamp when the position was closed (0 if still open) "
  timestampClosed: BigInt

  " lend balance of token 0 in this position, in native amounts "
  lendBalance0: BigDecimal!

  " borrow balance of token 0 in this position, in native amounts "
  borrowBalance0: BigDecimal!

  " lend balance of token 1 in this position, in native amounts "
  lendBalance1: BigDecimal!

  " borrow balance of token 1 in this position, in native amounts "
  borrowBalance1: BigDecimal!

  " lendshare of token 0 in this position "
  lendShare0: BigDecimal!

  " lendshare of token 1 in this position "
  lendShare1: BigDecimal!

  " borrowshare of token 0 in this position "
  borrowShare0: BigDecimal!

  " borrowshare of token 1 in this position "
  borrowShare1: BigDecimal!

  " Interest earned for token0 lend position "
  interestEarned0: BigDecimal!

  " Interest earned for token1 lend position "
  interestEarned1: BigDecimal!

  " Interest paid for token0 borrow position "
  intersetPaid0: BigDecimal!

  " Interest paid for token1 borrow position "
  intersetPaid1: BigDecimal!

  " current ltv of the position "
  currentLTV: BigDecimal!

  " HealthFactor value for token0 "
  healthFactor0: BigDecimal!

  " HealthFactor value for token1 "
  healthFactor1: BigDecimal!

  " Number of Lend related to this position "
  lendCount: BigInt!

  " All deposit events of this position "
  Lend: [Lend!]! @derivedFrom(field: "position")

  " Number of Redeems related to this position "
  redeemCount: BigInt!

  " All Redeem events of this position "
  redeems: [Redeem!]! @derivedFrom(field: "position")

  " Number of borrows related to this position "
  borrowCount: BigInt!

  " All borrow events of this position "
  borrows: [Borrow!]! @derivedFrom(field: "position")

  " Number of repays related to this position "
  repayCount: BigInt!

  " All repay events of this position "
  repays: [Repay!]! @derivedFrom(field: "position")

  " Number of liquidations related to this position "
  liquidationCount: BigInt!

  # " Liquidation event related to this position (if exists) "
  # liquidations: [Liquidate!]! @derivedFrom(field: "position")

  # " Position daily snapshots for open positions "
  # snapshots: [PositionSnapshot!]! @derivedFrom(field: "position")
}

type PoolDailySnapshot @entity {
  " { Smart contract address of the market }-{ # of days since Unix epoch time } "
  id: ID!

  " The pool this snapshot belongs to "
  pool: Pool!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  ##### Quantitative Data #####

  # " All interest rates / fees allowed in the market. Interest rate should be in APY percentage "
  # rates: [InterestRate!]!

  # " Current TVL (Total Value Locked) of this market "
  # totalValueLockedUSD: BigDecimal!

  " All revenue generated by the market, accrued to the supply side. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Daily revenue generated by the market, accrued to the supply side. "
  dailySupplySideRevenueUSD: BigDecimal!

  " All revenue generated by the market. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Daily revenue generated by the market. "
  dailyTotalRevenueUSD: BigDecimal!

  # " Current balance of all deposited assets (not historical cumulative), in USD. Same as pool TVL. "
  # totalLendBalanceUSD: BigDecimal!

  " Sum of all Lends made on a given day, in USD "
  dailyLendUSD: BigDecimal!

  # " Sum of all historical Lends in USD (only considers Lends and not Redeem) "
  # cumulativeDepositUSD: BigDecimal!

  # " Current balance of all borrowed/minted assets (not historical cumulative), in USD. "
  # totalBorrowBalanceUSD: BigDecimal!

  " Sum of all borrows/mints made on a given day, in USD "
  dailyBorrowUSD: BigDecimal!

  # " Sum of all historical borrows/mints in USD (i.e. total loan origination) "
  # cumulativeBorrowUSD: BigDecimal!

  " Total assets liquidated on a given day, in USD. "
  dailyLiquidateUSD: BigDecimal!

  # " Sum of all historical liquidations in USD "
  # cumulativeLiquidateUSD: BigDecimal!

  " Total assets Redeem on a given day, in USD. "
  dailyRedeemUSD: BigDecimal!

  " Total assets repaid on a given day, in USD. "
  dailyRepayUSD: BigDecimal!

}

type Lend @entity(immutable: true) {
  id: Bytes!
  amount: BigDecimal!
  tokenAmount: BigDecimal!
  sender: Bytes!
  pool: Pool!
  positionId: BigInt!
  position: Position
  token: Token!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  blockNumber: BigInt!
}

type Redeem @entity(immutable: true) {
  id: Bytes!
  amount: BigDecimal!
  tokenAmount: BigDecimal!
  sender: Bytes!
  pool: Pool!
  positionId: BigInt!
  position: Position
  token: Token!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  blockNumber: BigInt!
}

type Repay @entity(immutable: true) {
  id: Bytes!
  amount: BigDecimal!
  sender: Bytes!
  pool: Pool!
  positionId: BigInt!
  position: Position
  totalBorrows: BigDecimal!
  token: Token!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  blockNumber: BigInt!
}

type Borrow @entity(immutable: true) {
  id: Bytes!
  amount: BigDecimal!
  sender: Bytes!
  pool: Pool!
  positionId: BigInt!
  position: Position
  totalBorrows: BigDecimal!
  token: Token!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  blockNumber: BigInt!
}

# type AssetOracle @entity(immutable: true) {
#   id: Bytes!
#   tokenPrice: BigDecimal!
#   asset: Bytes!
#   source: Bytes!
#   # relativeTokenPrice0: BigDecimal!
# }

type Transfer @entity {
  id: Bytes!
  from: Bytes!
  to: Bytes!
  tokenId: BigInt!
}

type InterestUpdate @entity(immutable: true) {
  id: Bytes!
  interestRate0: BigDecimal!
  interestRate1: BigDecimal!
  totalBorrows0: BigDecimal!
  totalBorrows1: BigDecimal!
  blockTimestamp: BigInt!
  blockNumber: BigInt!
}

type LiquidateBorrow @entity(immutable: true) {
  id: ID!
  positionID: BigInt!
  toPositionID: BigInt!
  repayAmount: BigDecimal!
  seizeAmoutn: BigDecimal!
  blockTimestamp: BigInt!
  blockNumber: BigInt!
}
