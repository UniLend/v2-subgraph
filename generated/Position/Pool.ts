// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Borrow extends ethereum.Event {
  get params(): Borrow__Params {
    return new Borrow__Params(this);
  }
}

export class Borrow__Params {
  _event: Borrow;

  constructor(event: Borrow) {
    this._event = event;
  }

  get _asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _positionID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalBorrows(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _recipient(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class InterestUpdate extends ethereum.Event {
  get params(): InterestUpdate__Params {
    return new InterestUpdate__Params(this);
  }
}

export class InterestUpdate__Params {
  _event: InterestUpdate;

  constructor(event: InterestUpdate) {
    this._event = event;
  }

  get _newRate0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _newRate1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalBorrows0(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalBorrows1(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Lend extends ethereum.Event {
  get params(): Lend__Params {
    return new Lend__Params(this);
  }
}

export class Lend__Params {
  _event: Lend;

  constructor(event: Lend) {
    this._event = event;
  }

  get _asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _positionID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _token_amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LiquidateBorrow extends ethereum.Event {
  get params(): LiquidateBorrow__Params {
    return new LiquidateBorrow__Params(this);
  }
}

export class LiquidateBorrow__Params {
  _event: LiquidateBorrow;

  constructor(event: LiquidateBorrow) {
    this._event = event;
  }

  get _asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _positionID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _toPositionID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get repayAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get seizeTokens(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LiquidationPriceUpdate extends ethereum.Event {
  get params(): LiquidationPriceUpdate__Params {
    return new LiquidationPriceUpdate__Params(this);
  }
}

export class LiquidationPriceUpdate__Params {
  _event: LiquidationPriceUpdate;

  constructor(event: LiquidationPriceUpdate) {
    this._event = event;
  }

  get _positionID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _last_price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewLB extends ethereum.Event {
  get params(): NewLB__Params {
    return new NewLB__Params(this);
  }
}

export class NewLB__Params {
  _event: NewLB;

  constructor(event: NewLB) {
    this._event = event;
  }

  get oldLB(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newLB(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewLTV extends ethereum.Event {
  get params(): NewLTV__Params {
    return new NewLTV__Params(this);
  }
}

export class NewLTV__Params {
  _event: NewLTV;

  constructor(event: NewLTV) {
    this._event = event;
  }

  get oldLTV(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newLTV(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewMarketInterestRateModel extends ethereum.Event {
  get params(): NewMarketInterestRateModel__Params {
    return new NewMarketInterestRateModel__Params(this);
  }
}

export class NewMarketInterestRateModel__Params {
  _event: NewMarketInterestRateModel;

  constructor(event: NewMarketInterestRateModel) {
    this._event = event;
  }

  get oldInterestRateModel(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newInterestRateModel(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewRF extends ethereum.Event {
  get params(): NewRF__Params {
    return new NewRF__Params(this);
  }
}

export class NewRF__Params {
  _event: NewRF;

  constructor(event: NewRF) {
    this._event = event;
  }

  get oldRF(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newRF(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get _asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _positionID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _token_amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RepayBorrow extends ethereum.Event {
  get params(): RepayBorrow__Params {
    return new RepayBorrow__Params(this);
  }
}

export class RepayBorrow__Params {
  _event: RepayBorrow;

  constructor(event: RepayBorrow) {
    this._event = event;
  }

  get _asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _positionID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalBorrows(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _payer(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class Pool__positionDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getToken0lendShare(): BigInt {
    return this.value0;
  }

  getToken1lendShare(): BigInt {
    return this.value1;
  }

  getToken0borrowShare(): BigInt {
    return this.value2;
  }

  getToken1borrowShare(): BigInt {
    return this.value3;
  }
}

export class Pool__token0DataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getTotalLendShare(): BigInt {
    return this.value0;
  }

  getTotalBorrowShare(): BigInt {
    return this.value1;
  }

  getTotalBorrow(): BigInt {
    return this.value2;
  }
}

export class Pool__token1DataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getTotalLendShare(): BigInt {
    return this.value0;
  }

  getTotalBorrowShare(): BigInt {
    return this.value1;
  }

  getTotalBorrow(): BigInt {
    return this.value2;
  }
}

export class Pool__userHealthFactorLtvResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_healthFactor0(): BigInt {
    return this.value0;
  }

  get_healthFactor1(): BigInt {
    return this.value1;
  }
}

export class Pool__userHealthFactorResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_healthFactor0(): BigInt {
    return this.value0;
  }

  get_healthFactor1(): BigInt {
    return this.value1;
  }
}

export class Pool__userBalanceOftoken0Result {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_lendBalance0(): BigInt {
    return this.value0;
  }

  get_borrowBalance0(): BigInt {
    return this.value1;
  }
}

export class Pool__userBalanceOftoken1Result {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_lendBalance1(): BigInt {
    return this.value0;
  }

  get_borrowBalance1(): BigInt {
    return this.value1;
  }
}

export class Pool__userBalanceOftokensResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  get_lendBalance0(): BigInt {
    return this.value0;
  }

  get_borrowBalance0(): BigInt {
    return this.value1;
  }

  get_lendBalance1(): BigInt {
    return this.value2;
  }

  get_borrowBalance1(): BigInt {
    return this.value3;
  }
}

export class Pool__userSharesOftoken0Result {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_lendShare0(): BigInt {
    return this.value0;
  }

  get_borrowShare0(): BigInt {
    return this.value1;
  }
}

export class Pool__userSharesOftoken1Result {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_lendShare1(): BigInt {
    return this.value0;
  }

  get_borrowShare1(): BigInt {
    return this.value1;
  }
}

export class Pool__userSharesOftokensResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  get_lendShare0(): BigInt {
    return this.value0;
  }

  get_borrowShare0(): BigInt {
    return this.value1;
  }

  get_lendShare1(): BigInt {
    return this.value2;
  }

  get_borrowShare1(): BigInt {
    return this.value3;
  }
}

export class Pool__poolDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    return map;
  }

  get_totalLendShare0(): BigInt {
    return this.value0;
  }

  get_totalBorrowShare0(): BigInt {
    return this.value1;
  }

  get_totalBorrow0(): BigInt {
    return this.value2;
  }

  get_totalBalance0(): BigInt {
    return this.value3;
  }

  get_totalAvailableLiquidity0(): BigInt {
    return this.value4;
  }

  get_totalLendShare1(): BigInt {
    return this.value5;
  }

  get_totalBorrowShare1(): BigInt {
    return this.value6;
  }

  get_totalBorrow1(): BigInt {
    return this.value7;
  }

  get_totalBalance1(): BigInt {
    return this.value8;
  }

  get_totalAvailableLiquidity1(): BigInt {
    return this.value9;
  }
}

export class Pool extends ethereum.SmartContract {
  static bind(address: Address): Pool {
    return new Pool("Pool", address);
  }

  HEALTH_FACTOR_LIQUIDATION_THRESHOLD(): BigInt {
    let result = super.call(
      "HEALTH_FACTOR_LIQUIDATION_THRESHOLD",
      "HEALTH_FACTOR_LIQUIDATION_THRESHOLD():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_HEALTH_FACTOR_LIQUIDATION_THRESHOLD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "HEALTH_FACTOR_LIQUIDATION_THRESHOLD",
      "HEALTH_FACTOR_LIQUIDATION_THRESHOLD():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  core(): Address {
    let result = super.call("core", "core():(address)", []);

    return result[0].toAddress();
  }

  try_core(): ethereum.CallResult<Address> {
    let result = super.tryCall("core", "core():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  interestRateAddress(): Address {
    let result = super.call(
      "interestRateAddress",
      "interestRateAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_interestRateAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "interestRateAddress",
      "interestRateAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastUpdated(): BigInt {
    let result = super.call("lastUpdated", "lastUpdated():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastUpdated(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastUpdated", "lastUpdated():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  positionData(param0: BigInt): Pool__positionDataResult {
    let result = super.call(
      "positionData",
      "positionData(uint256):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Pool__positionDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_positionData(
    param0: BigInt
  ): ethereum.CallResult<Pool__positionDataResult> {
    let result = super.tryCall(
      "positionData",
      "positionData(uint256):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__positionDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  token0(): Address {
    let result = super.call("token0", "token0():(address)", []);

    return result[0].toAddress();
  }

  try_token0(): ethereum.CallResult<Address> {
    let result = super.tryCall("token0", "token0():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token0Data(): Pool__token0DataResult {
    let result = super.call(
      "token0Data",
      "token0Data():(uint256,uint256,uint256)",
      []
    );

    return new Pool__token0DataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_token0Data(): ethereum.CallResult<Pool__token0DataResult> {
    let result = super.tryCall(
      "token0Data",
      "token0Data():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__token0DataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  token1(): Address {
    let result = super.call("token1", "token1():(address)", []);

    return result[0].toAddress();
  }

  try_token1(): ethereum.CallResult<Address> {
    let result = super.tryCall("token1", "token1():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token1Data(): Pool__token1DataResult {
    let result = super.call(
      "token1Data",
      "token1Data():(uint256,uint256,uint256)",
      []
    );

    return new Pool__token1DataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_token1Data(): ethereum.CallResult<Pool__token1DataResult> {
    let result = super.tryCall(
      "token1Data",
      "token1Data():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__token1DataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getLTV(): BigInt {
    let result = super.call("getLTV", "getLTV():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getLTV(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getLTV", "getLTV():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLB(): BigInt {
    let result = super.call("getLB", "getLB():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getLB(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getLB", "getLB():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRF(): BigInt {
    let result = super.call("getRF", "getRF():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getRF(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getRF", "getRF():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getInterestRate(_totalBorrow: BigInt, _availableBorrow: BigInt): BigInt {
    let result = super.call(
      "getInterestRate",
      "getInterestRate(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_totalBorrow),
        ethereum.Value.fromUnsignedBigInt(_availableBorrow)
      ]
    );

    return result[0].toBigInt();
  }

  try_getInterestRate(
    _totalBorrow: BigInt,
    _availableBorrow: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getInterestRate",
      "getInterestRate(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_totalBorrow),
        ethereum.Value.fromUnsignedBigInt(_availableBorrow)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAvailableLiquidity0(): BigInt {
    let result = super.call(
      "getAvailableLiquidity0",
      "getAvailableLiquidity0():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getAvailableLiquidity0(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAvailableLiquidity0",
      "getAvailableLiquidity0():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAvailableLiquidity1(): BigInt {
    let result = super.call(
      "getAvailableLiquidity1",
      "getAvailableLiquidity1():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getAvailableLiquidity1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAvailableLiquidity1",
      "getAvailableLiquidity1():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userHealthFactorLtv(_nftID: BigInt): Pool__userHealthFactorLtvResult {
    let result = super.call(
      "userHealthFactorLtv",
      "userHealthFactorLtv(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_nftID)]
    );

    return new Pool__userHealthFactorLtvResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_userHealthFactorLtv(
    _nftID: BigInt
  ): ethereum.CallResult<Pool__userHealthFactorLtvResult> {
    let result = super.tryCall(
      "userHealthFactorLtv",
      "userHealthFactorLtv(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_nftID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__userHealthFactorLtvResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  userHealthFactor(_nftID: BigInt): Pool__userHealthFactorResult {
    let result = super.call(
      "userHealthFactor",
      "userHealthFactor(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_nftID)]
    );

    return new Pool__userHealthFactorResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_userHealthFactor(
    _nftID: BigInt
  ): ethereum.CallResult<Pool__userHealthFactorResult> {
    let result = super.tryCall(
      "userHealthFactor",
      "userHealthFactor(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_nftID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__userHealthFactorResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  userBalanceOftoken0(_nftID: BigInt): Pool__userBalanceOftoken0Result {
    let result = super.call(
      "userBalanceOftoken0",
      "userBalanceOftoken0(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_nftID)]
    );

    return new Pool__userBalanceOftoken0Result(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_userBalanceOftoken0(
    _nftID: BigInt
  ): ethereum.CallResult<Pool__userBalanceOftoken0Result> {
    let result = super.tryCall(
      "userBalanceOftoken0",
      "userBalanceOftoken0(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_nftID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__userBalanceOftoken0Result(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  userBalanceOftoken1(_nftID: BigInt): Pool__userBalanceOftoken1Result {
    let result = super.call(
      "userBalanceOftoken1",
      "userBalanceOftoken1(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_nftID)]
    );

    return new Pool__userBalanceOftoken1Result(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_userBalanceOftoken1(
    _nftID: BigInt
  ): ethereum.CallResult<Pool__userBalanceOftoken1Result> {
    let result = super.tryCall(
      "userBalanceOftoken1",
      "userBalanceOftoken1(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_nftID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__userBalanceOftoken1Result(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  userBalanceOftokens(_nftID: BigInt): Pool__userBalanceOftokensResult {
    let result = super.call(
      "userBalanceOftokens",
      "userBalanceOftokens(uint256):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_nftID)]
    );

    return new Pool__userBalanceOftokensResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_userBalanceOftokens(
    _nftID: BigInt
  ): ethereum.CallResult<Pool__userBalanceOftokensResult> {
    let result = super.tryCall(
      "userBalanceOftokens",
      "userBalanceOftokens(uint256):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_nftID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__userBalanceOftokensResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  userSharesOftoken0(_nftID: BigInt): Pool__userSharesOftoken0Result {
    let result = super.call(
      "userSharesOftoken0",
      "userSharesOftoken0(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_nftID)]
    );

    return new Pool__userSharesOftoken0Result(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_userSharesOftoken0(
    _nftID: BigInt
  ): ethereum.CallResult<Pool__userSharesOftoken0Result> {
    let result = super.tryCall(
      "userSharesOftoken0",
      "userSharesOftoken0(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_nftID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__userSharesOftoken0Result(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  userSharesOftoken1(_nftID: BigInt): Pool__userSharesOftoken1Result {
    let result = super.call(
      "userSharesOftoken1",
      "userSharesOftoken1(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_nftID)]
    );

    return new Pool__userSharesOftoken1Result(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_userSharesOftoken1(
    _nftID: BigInt
  ): ethereum.CallResult<Pool__userSharesOftoken1Result> {
    let result = super.tryCall(
      "userSharesOftoken1",
      "userSharesOftoken1(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_nftID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__userSharesOftoken1Result(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  userSharesOftokens(_nftID: BigInt): Pool__userSharesOftokensResult {
    let result = super.call(
      "userSharesOftokens",
      "userSharesOftokens(uint256):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_nftID)]
    );

    return new Pool__userSharesOftokensResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_userSharesOftokens(
    _nftID: BigInt
  ): ethereum.CallResult<Pool__userSharesOftokensResult> {
    let result = super.tryCall(
      "userSharesOftokens",
      "userSharesOftokens(uint256):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_nftID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__userSharesOftokensResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  poolData(): Pool__poolDataResult {
    let result = super.call(
      "poolData",
      "poolData():(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      []
    );

    return new Pool__poolDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt()
    );
  }

  try_poolData(): ethereum.CallResult<Pool__poolDataResult> {
    let result = super.tryCall(
      "poolData",
      "poolData():(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__poolDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt()
      )
    );
  }

  lend(_nftID: BigInt, amount: BigInt): BigInt {
    let result = super.call("lend", "lend(uint256,int256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_nftID),
      ethereum.Value.fromSignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_lend(_nftID: BigInt, amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lend", "lend(uint256,int256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_nftID),
      ethereum.Value.fromSignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeem(_nftID: BigInt, tok_amount: BigInt, _receiver: Address): BigInt {
    let result = super.call(
      "redeem",
      "redeem(uint256,int256,address):(int256)",
      [
        ethereum.Value.fromUnsignedBigInt(_nftID),
        ethereum.Value.fromSignedBigInt(tok_amount),
        ethereum.Value.fromAddress(_receiver)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeem(
    _nftID: BigInt,
    tok_amount: BigInt,
    _receiver: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeem",
      "redeem(uint256,int256,address):(int256)",
      [
        ethereum.Value.fromUnsignedBigInt(_nftID),
        ethereum.Value.fromSignedBigInt(tok_amount),
        ethereum.Value.fromAddress(_receiver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemUnderlying(
    _nftID: BigInt,
    _amount: BigInt,
    _receiver: Address
  ): BigInt {
    let result = super.call(
      "redeemUnderlying",
      "redeemUnderlying(uint256,int256,address):(int256)",
      [
        ethereum.Value.fromUnsignedBigInt(_nftID),
        ethereum.Value.fromSignedBigInt(_amount),
        ethereum.Value.fromAddress(_receiver)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeemUnderlying(
    _nftID: BigInt,
    _amount: BigInt,
    _receiver: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemUnderlying",
      "redeemUnderlying(uint256,int256,address):(int256)",
      [
        ethereum.Value.fromUnsignedBigInt(_nftID),
        ethereum.Value.fromSignedBigInt(_amount),
        ethereum.Value.fromAddress(_receiver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  repay(_nftID: BigInt, amount: BigInt, _payer: Address): BigInt {
    let result = super.call("repay", "repay(uint256,int256,address):(int256)", [
      ethereum.Value.fromUnsignedBigInt(_nftID),
      ethereum.Value.fromSignedBigInt(amount),
      ethereum.Value.fromAddress(_payer)
    ]);

    return result[0].toBigInt();
  }

  try_repay(
    _nftID: BigInt,
    amount: BigInt,
    _payer: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "repay",
      "repay(uint256,int256,address):(int256)",
      [
        ethereum.Value.fromUnsignedBigInt(_nftID),
        ethereum.Value.fromSignedBigInt(amount),
        ethereum.Value.fromAddress(_payer)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidate(
    _nftID: BigInt,
    amount: BigInt,
    _receiver: Address,
    _toNftID: BigInt
  ): BigInt {
    let result = super.call(
      "liquidate",
      "liquidate(uint256,int256,address,uint256):(int256)",
      [
        ethereum.Value.fromUnsignedBigInt(_nftID),
        ethereum.Value.fromSignedBigInt(amount),
        ethereum.Value.fromAddress(_receiver),
        ethereum.Value.fromUnsignedBigInt(_toNftID)
      ]
    );

    return result[0].toBigInt();
  }

  try_liquidate(
    _nftID: BigInt,
    amount: BigInt,
    _receiver: Address,
    _toNftID: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidate",
      "liquidate(uint256,int256,address,uint256):(int256)",
      [
        ethereum.Value.fromUnsignedBigInt(_nftID),
        ethereum.Value.fromSignedBigInt(amount),
        ethereum.Value.fromAddress(_receiver),
        ethereum.Value.fromUnsignedBigInt(_toNftID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidateMulti(
    _nftIDs: Array<BigInt>,
    amounts: Array<BigInt>,
    _receiver: Address,
    _toNftID: BigInt
  ): BigInt {
    let result = super.call(
      "liquidateMulti",
      "liquidateMulti(uint256[],int256[],address,uint256):(int256)",
      [
        ethereum.Value.fromUnsignedBigIntArray(_nftIDs),
        ethereum.Value.fromSignedBigIntArray(amounts),
        ethereum.Value.fromAddress(_receiver),
        ethereum.Value.fromUnsignedBigInt(_toNftID)
      ]
    );

    return result[0].toBigInt();
  }

  try_liquidateMulti(
    _nftIDs: Array<BigInt>,
    amounts: Array<BigInt>,
    _receiver: Address,
    _toNftID: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidateMulti",
      "liquidateMulti(uint256[],int256[],address,uint256):(int256)",
      [
        ethereum.Value.fromUnsignedBigIntArray(_nftIDs),
        ethereum.Value.fromSignedBigIntArray(amounts),
        ethereum.Value.fromAddress(_receiver),
        ethereum.Value.fromUnsignedBigInt(_toNftID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get _token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _interestRate(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _ltv(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _lb(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get _rf(): i32 {
    return this._call.inputValues[5].value.toI32();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class SetInterestRateAddressCall extends ethereum.Call {
  get inputs(): SetInterestRateAddressCall__Inputs {
    return new SetInterestRateAddressCall__Inputs(this);
  }

  get outputs(): SetInterestRateAddressCall__Outputs {
    return new SetInterestRateAddressCall__Outputs(this);
  }
}

export class SetInterestRateAddressCall__Inputs {
  _call: SetInterestRateAddressCall;

  constructor(call: SetInterestRateAddressCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetInterestRateAddressCall__Outputs {
  _call: SetInterestRateAddressCall;

  constructor(call: SetInterestRateAddressCall) {
    this._call = call;
  }
}

export class SetLTVCall extends ethereum.Call {
  get inputs(): SetLTVCall__Inputs {
    return new SetLTVCall__Inputs(this);
  }

  get outputs(): SetLTVCall__Outputs {
    return new SetLTVCall__Outputs(this);
  }
}

export class SetLTVCall__Inputs {
  _call: SetLTVCall;

  constructor(call: SetLTVCall) {
    this._call = call;
  }

  get _number(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetLTVCall__Outputs {
  _call: SetLTVCall;

  constructor(call: SetLTVCall) {
    this._call = call;
  }
}

export class SetLBCall extends ethereum.Call {
  get inputs(): SetLBCall__Inputs {
    return new SetLBCall__Inputs(this);
  }

  get outputs(): SetLBCall__Outputs {
    return new SetLBCall__Outputs(this);
  }
}

export class SetLBCall__Inputs {
  _call: SetLBCall;

  constructor(call: SetLBCall) {
    this._call = call;
  }

  get _number(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetLBCall__Outputs {
  _call: SetLBCall;

  constructor(call: SetLBCall) {
    this._call = call;
  }
}

export class SetRFCall extends ethereum.Call {
  get inputs(): SetRFCall__Inputs {
    return new SetRFCall__Inputs(this);
  }

  get outputs(): SetRFCall__Outputs {
    return new SetRFCall__Outputs(this);
  }
}

export class SetRFCall__Inputs {
  _call: SetRFCall;

  constructor(call: SetRFCall) {
    this._call = call;
  }

  get _number(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetRFCall__Outputs {
  _call: SetRFCall;

  constructor(call: SetRFCall) {
    this._call = call;
  }
}

export class AccrueInterestCall extends ethereum.Call {
  get inputs(): AccrueInterestCall__Inputs {
    return new AccrueInterestCall__Inputs(this);
  }

  get outputs(): AccrueInterestCall__Outputs {
    return new AccrueInterestCall__Outputs(this);
  }
}

export class AccrueInterestCall__Inputs {
  _call: AccrueInterestCall;

  constructor(call: AccrueInterestCall) {
    this._call = call;
  }
}

export class AccrueInterestCall__Outputs {
  _call: AccrueInterestCall;

  constructor(call: AccrueInterestCall) {
    this._call = call;
  }
}

export class TransferFlashLoanProtocolFeeCall extends ethereum.Call {
  get inputs(): TransferFlashLoanProtocolFeeCall__Inputs {
    return new TransferFlashLoanProtocolFeeCall__Inputs(this);
  }

  get outputs(): TransferFlashLoanProtocolFeeCall__Outputs {
    return new TransferFlashLoanProtocolFeeCall__Outputs(this);
  }
}

export class TransferFlashLoanProtocolFeeCall__Inputs {
  _call: TransferFlashLoanProtocolFeeCall;

  constructor(call: TransferFlashLoanProtocolFeeCall) {
    this._call = call;
  }

  get _distributorAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFlashLoanProtocolFeeCall__Outputs {
  _call: TransferFlashLoanProtocolFeeCall;

  constructor(call: TransferFlashLoanProtocolFeeCall) {
    this._call = call;
  }
}

export class ProcessFlashLoanCall extends ethereum.Call {
  get inputs(): ProcessFlashLoanCall__Inputs {
    return new ProcessFlashLoanCall__Inputs(this);
  }

  get outputs(): ProcessFlashLoanCall__Outputs {
    return new ProcessFlashLoanCall__Outputs(this);
  }
}

export class ProcessFlashLoanCall__Inputs {
  _call: ProcessFlashLoanCall;

  constructor(call: ProcessFlashLoanCall) {
    this._call = call;
  }

  get _receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ProcessFlashLoanCall__Outputs {
  _call: ProcessFlashLoanCall;

  constructor(call: ProcessFlashLoanCall) {
    this._call = call;
  }
}

export class LendCall extends ethereum.Call {
  get inputs(): LendCall__Inputs {
    return new LendCall__Inputs(this);
  }

  get outputs(): LendCall__Outputs {
    return new LendCall__Outputs(this);
  }
}

export class LendCall__Inputs {
  _call: LendCall;

  constructor(call: LendCall) {
    this._call = call;
  }

  get _nftID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LendCall__Outputs {
  _call: LendCall;

  constructor(call: LendCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get _nftID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tok_amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _receiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemUnderlyingCall extends ethereum.Call {
  get inputs(): RedeemUnderlyingCall__Inputs {
    return new RedeemUnderlyingCall__Inputs(this);
  }

  get outputs(): RedeemUnderlyingCall__Outputs {
    return new RedeemUnderlyingCall__Outputs(this);
  }
}

export class RedeemUnderlyingCall__Inputs {
  _call: RedeemUnderlyingCall;

  constructor(call: RedeemUnderlyingCall) {
    this._call = call;
  }

  get _nftID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _receiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RedeemUnderlyingCall__Outputs {
  _call: RedeemUnderlyingCall;

  constructor(call: RedeemUnderlyingCall) {
    this._call = call;
  }

  get rtAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get _nftID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get _nftID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _payer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get _rAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get _nftID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _receiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _toNftID(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get liquidatedAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidateMultiCall extends ethereum.Call {
  get inputs(): LiquidateMultiCall__Inputs {
    return new LiquidateMultiCall__Inputs(this);
  }

  get outputs(): LiquidateMultiCall__Outputs {
    return new LiquidateMultiCall__Outputs(this);
  }
}

export class LiquidateMultiCall__Inputs {
  _call: LiquidateMultiCall;

  constructor(call: LiquidateMultiCall) {
    this._call = call;
  }

  get _nftIDs(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _receiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _toNftID(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class LiquidateMultiCall__Outputs {
  _call: LiquidateMultiCall;

  constructor(call: LiquidateMultiCall) {
    this._call = call;
  }

  get liquidatedAmountTotal(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
