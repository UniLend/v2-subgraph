// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FlashLoan extends ethereum.Event {
  get params(): FlashLoan__Params {
    return new FlashLoan__Params(this);
  }
}

export class FlashLoan__Params {
  _event: FlashLoan;

  constructor(event: FlashLoan) {
    this._event = event;
  }

  get _target(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _reserve(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _totalFee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _protocolFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _timestamp(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class NewDefaultInterestRateAddress extends ethereum.Event {
  get params(): NewDefaultInterestRateAddress__Params {
    return new NewDefaultInterestRateAddress__Params(this);
  }
}

export class NewDefaultInterestRateAddress__Params {
  _event: NewDefaultInterestRateAddress;

  constructor(event: NewDefaultInterestRateAddress) {
    this._event = event;
  }

  get _address(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewDefaultMarketConfig extends ethereum.Event {
  get params(): NewDefaultMarketConfig__Params {
    return new NewDefaultMarketConfig__Params(this);
  }
}

export class NewDefaultMarketConfig__Params {
  _event: NewDefaultMarketConfig;

  constructor(event: NewDefaultMarketConfig) {
    this._event = event;
  }

  get _ltv(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get _lb(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get _rf(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class NewGovernorAddress extends ethereum.Event {
  get params(): NewGovernorAddress__Params {
    return new NewGovernorAddress__Params(this);
  }
}

export class NewGovernorAddress__Params {
  _event: NewGovernorAddress;

  constructor(event: NewGovernorAddress) {
    this._event = event;
  }

  get _address(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewOracleAddress extends ethereum.Event {
  get params(): NewOracleAddress__Params {
    return new NewOracleAddress__Params(this);
  }
}

export class NewOracleAddress__Params {
  _event: NewOracleAddress;

  constructor(event: NewOracleAddress) {
    this._event = event;
  }

  get _address(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewPositionAddress extends ethereum.Event {
  get params(): NewPositionAddress__Params {
    return new NewPositionAddress__Params(this);
  }
}

export class NewPositionAddress__Params {
  _event: NewPositionAddress;

  constructor(event: NewPositionAddress) {
    this._event = event;
  }

  get _address(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get token0(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token1(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get param3(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Core__getFlashLoanFeesInBipsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Core__getPoolTokensResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): Address {
    return this.value1;
  }
}

export class Core__balanceOfUserToken0Result {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_lendBalance0(): BigInt {
    return this.value0;
  }

  get_borrowBalance0(): BigInt {
    return this.value1;
  }
}

export class Core__balanceOfUserToken1Result {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_lendBalance1(): BigInt {
    return this.value0;
  }

  get_borrowBalance1(): BigInt {
    return this.value1;
  }
}

export class Core__balanceOfUserTokensResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  get_lendBalance0(): BigInt {
    return this.value0;
  }

  get_borrowBalance0(): BigInt {
    return this.value1;
  }

  get_lendBalance1(): BigInt {
    return this.value2;
  }

  get_borrowBalance1(): BigInt {
    return this.value3;
  }
}

export class Core__shareOfUserToken0Result {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_lendShare0(): BigInt {
    return this.value0;
  }

  get_borrowShare0(): BigInt {
    return this.value1;
  }
}

export class Core__shareOfUserToken1Result {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_lendShare1(): BigInt {
    return this.value0;
  }

  get_borrowShare1(): BigInt {
    return this.value1;
  }
}

export class Core__shareOfUserTokensResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  get_lendShare0(): BigInt {
    return this.value0;
  }

  get_borrowShare0(): BigInt {
    return this.value1;
  }

  get_lendShare1(): BigInt {
    return this.value2;
  }

  get_borrowShare1(): BigInt {
    return this.value3;
  }
}

export class Core__getUserHealthFactorResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_healthFactor0(): BigInt {
    return this.value0;
  }

  get_healthFactor1(): BigInt {
    return this.value1;
  }
}

export class Core__getPoolAvailableLiquidityResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_token0Liquidity(): BigInt {
    return this.value0;
  }

  get_token1Liquidity(): BigInt {
    return this.value1;
  }
}

export class Core extends ethereum.SmartContract {
  static bind(address: Address): Core {
    return new Core("Core", address);
  }

  defaultInterestRate(): Address {
    let result = super.call(
      "defaultInterestRate",
      "defaultInterestRate():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_defaultInterestRate(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "defaultInterestRate",
      "defaultInterestRate():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  distributorAddress(): Address {
    let result = super.call(
      "distributorAddress",
      "distributorAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_distributorAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "distributorAddress",
      "distributorAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPool(param0: Address, param1: Address): Address {
    let result = super.call("getPool", "getPool(address,address):(address)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toAddress();
  }

  try_getPool(param0: Address, param1: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPool",
      "getPool(address,address):(address)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  governor(): Address {
    let result = super.call("governor", "governor():(address)", []);

    return result[0].toAddress();
  }

  try_governor(): ethereum.CallResult<Address> {
    let result = super.tryCall("governor", "governor():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  oracleAddress(): Address {
    let result = super.call("oracleAddress", "oracleAddress():(address)", []);

    return result[0].toAddress();
  }

  try_oracleAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "oracleAddress",
      "oracleAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolLength(): BigInt {
    let result = super.call("poolLength", "poolLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolLength", "poolLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolMasterAddress(): Address {
    let result = super.call(
      "poolMasterAddress",
      "poolMasterAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_poolMasterAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "poolMasterAddress",
      "poolMasterAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  positionsAddress(): Address {
    let result = super.call(
      "positionsAddress",
      "positionsAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_positionsAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "positionsAddress",
      "positionsAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFlashLoanFeesInBips(): Core__getFlashLoanFeesInBipsResult {
    let result = super.call(
      "getFlashLoanFeesInBips",
      "getFlashLoanFeesInBips():(uint256,uint256)",
      []
    );

    return new Core__getFlashLoanFeesInBipsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getFlashLoanFeesInBips(): ethereum.CallResult<
    Core__getFlashLoanFeesInBipsResult
  > {
    let result = super.tryCall(
      "getFlashLoanFeesInBips",
      "getFlashLoanFeesInBips():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Core__getFlashLoanFeesInBipsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getOraclePrice(_token0: Address, _token1: Address, _amount: BigInt): BigInt {
    let result = super.call(
      "getOraclePrice",
      "getOraclePrice(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token0),
        ethereum.Value.fromAddress(_token1),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getOraclePrice(
    _token0: Address,
    _token1: Address,
    _amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOraclePrice",
      "getOraclePrice(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token0),
        ethereum.Value.fromAddress(_token1),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPoolLTV(_pool: Address): BigInt {
    let result = super.call("getPoolLTV", "getPoolLTV(address):(uint256)", [
      ethereum.Value.fromAddress(_pool)
    ]);

    return result[0].toBigInt();
  }

  try_getPoolLTV(_pool: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getPoolLTV", "getPoolLTV(address):(uint256)", [
      ethereum.Value.fromAddress(_pool)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPoolTokens(_pool: Address): Core__getPoolTokensResult {
    let result = super.call(
      "getPoolTokens",
      "getPoolTokens(address):(address,address)",
      [ethereum.Value.fromAddress(_pool)]
    );

    return new Core__getPoolTokensResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_getPoolTokens(
    _pool: Address
  ): ethereum.CallResult<Core__getPoolTokensResult> {
    let result = super.tryCall(
      "getPoolTokens",
      "getPoolTokens(address):(address,address)",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Core__getPoolTokensResult(value[0].toAddress(), value[1].toAddress())
    );
  }

  getPoolByTokens(_token0: Address, _token1: Address): Address {
    let result = super.call(
      "getPoolByTokens",
      "getPoolByTokens(address,address):(address)",
      [ethereum.Value.fromAddress(_token0), ethereum.Value.fromAddress(_token1)]
    );

    return result[0].toAddress();
  }

  try_getPoolByTokens(
    _token0: Address,
    _token1: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPoolByTokens",
      "getPoolByTokens(address,address):(address)",
      [ethereum.Value.fromAddress(_token0), ethereum.Value.fromAddress(_token1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOfUserToken0(
    _pool: Address,
    _address: Address
  ): Core__balanceOfUserToken0Result {
    let result = super.call(
      "balanceOfUserToken0",
      "balanceOfUserToken0(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_pool), ethereum.Value.fromAddress(_address)]
    );

    return new Core__balanceOfUserToken0Result(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_balanceOfUserToken0(
    _pool: Address,
    _address: Address
  ): ethereum.CallResult<Core__balanceOfUserToken0Result> {
    let result = super.tryCall(
      "balanceOfUserToken0",
      "balanceOfUserToken0(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_pool), ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Core__balanceOfUserToken0Result(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  balanceOfUserToken1(
    _pool: Address,
    _address: Address
  ): Core__balanceOfUserToken1Result {
    let result = super.call(
      "balanceOfUserToken1",
      "balanceOfUserToken1(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_pool), ethereum.Value.fromAddress(_address)]
    );

    return new Core__balanceOfUserToken1Result(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_balanceOfUserToken1(
    _pool: Address,
    _address: Address
  ): ethereum.CallResult<Core__balanceOfUserToken1Result> {
    let result = super.tryCall(
      "balanceOfUserToken1",
      "balanceOfUserToken1(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_pool), ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Core__balanceOfUserToken1Result(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  balanceOfUserTokens(
    _pool: Address,
    _address: Address
  ): Core__balanceOfUserTokensResult {
    let result = super.call(
      "balanceOfUserTokens",
      "balanceOfUserTokens(address,address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_pool), ethereum.Value.fromAddress(_address)]
    );

    return new Core__balanceOfUserTokensResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_balanceOfUserTokens(
    _pool: Address,
    _address: Address
  ): ethereum.CallResult<Core__balanceOfUserTokensResult> {
    let result = super.tryCall(
      "balanceOfUserTokens",
      "balanceOfUserTokens(address,address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_pool), ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Core__balanceOfUserTokensResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  shareOfUserToken0(
    _pool: Address,
    _address: Address
  ): Core__shareOfUserToken0Result {
    let result = super.call(
      "shareOfUserToken0",
      "shareOfUserToken0(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_pool), ethereum.Value.fromAddress(_address)]
    );

    return new Core__shareOfUserToken0Result(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_shareOfUserToken0(
    _pool: Address,
    _address: Address
  ): ethereum.CallResult<Core__shareOfUserToken0Result> {
    let result = super.tryCall(
      "shareOfUserToken0",
      "shareOfUserToken0(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_pool), ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Core__shareOfUserToken0Result(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  shareOfUserToken1(
    _pool: Address,
    _address: Address
  ): Core__shareOfUserToken1Result {
    let result = super.call(
      "shareOfUserToken1",
      "shareOfUserToken1(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_pool), ethereum.Value.fromAddress(_address)]
    );

    return new Core__shareOfUserToken1Result(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_shareOfUserToken1(
    _pool: Address,
    _address: Address
  ): ethereum.CallResult<Core__shareOfUserToken1Result> {
    let result = super.tryCall(
      "shareOfUserToken1",
      "shareOfUserToken1(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_pool), ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Core__shareOfUserToken1Result(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  shareOfUserTokens(
    _pool: Address,
    _address: Address
  ): Core__shareOfUserTokensResult {
    let result = super.call(
      "shareOfUserTokens",
      "shareOfUserTokens(address,address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_pool), ethereum.Value.fromAddress(_address)]
    );

    return new Core__shareOfUserTokensResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_shareOfUserTokens(
    _pool: Address,
    _address: Address
  ): ethereum.CallResult<Core__shareOfUserTokensResult> {
    let result = super.tryCall(
      "shareOfUserTokens",
      "shareOfUserTokens(address,address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_pool), ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Core__shareOfUserTokensResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getUserHealthFactor(
    _pool: Address,
    _address: Address
  ): Core__getUserHealthFactorResult {
    let result = super.call(
      "getUserHealthFactor",
      "getUserHealthFactor(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_pool), ethereum.Value.fromAddress(_address)]
    );

    return new Core__getUserHealthFactorResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getUserHealthFactor(
    _pool: Address,
    _address: Address
  ): ethereum.CallResult<Core__getUserHealthFactorResult> {
    let result = super.tryCall(
      "getUserHealthFactor",
      "getUserHealthFactor(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_pool), ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Core__getUserHealthFactorResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getPoolAvailableLiquidity(
    _pool: Address
  ): Core__getPoolAvailableLiquidityResult {
    let result = super.call(
      "getPoolAvailableLiquidity",
      "getPoolAvailableLiquidity(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_pool)]
    );

    return new Core__getPoolAvailableLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getPoolAvailableLiquidity(
    _pool: Address
  ): ethereum.CallResult<Core__getPoolAvailableLiquidityResult> {
    let result = super.tryCall(
      "getPoolAvailableLiquidity",
      "getPoolAvailableLiquidity(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Core__getPoolAvailableLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  setFlashLoanFeesInBips(
    _newFeeTotal: BigInt,
    _newFeeProtocol: BigInt
  ): boolean {
    let result = super.call(
      "setFlashLoanFeesInBips",
      "setFlashLoanFeesInBips(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_newFeeTotal),
        ethereum.Value.fromUnsignedBigInt(_newFeeProtocol)
      ]
    );

    return result[0].toBoolean();
  }

  try_setFlashLoanFeesInBips(
    _newFeeTotal: BigInt,
    _newFeeProtocol: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setFlashLoanFeesInBips",
      "setFlashLoanFeesInBips(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_newFeeTotal),
        ethereum.Value.fromUnsignedBigInt(_newFeeProtocol)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lend(_pool: Address, _amount: BigInt): BigInt {
    let result = super.call("lend", "lend(address,int256):(uint256)", [
      ethereum.Value.fromAddress(_pool),
      ethereum.Value.fromSignedBigInt(_amount)
    ]);

    return result[0].toBigInt();
  }

  try_lend(_pool: Address, _amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lend", "lend(address,int256):(uint256)", [
      ethereum.Value.fromAddress(_pool),
      ethereum.Value.fromSignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeem(_pool: Address, _token_amount: BigInt, _receiver: Address): BigInt {
    let result = super.call(
      "redeem",
      "redeem(address,int256,address):(int256)",
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromSignedBigInt(_token_amount),
        ethereum.Value.fromAddress(_receiver)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeem(
    _pool: Address,
    _token_amount: BigInt,
    _receiver: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeem",
      "redeem(address,int256,address):(int256)",
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromSignedBigInt(_token_amount),
        ethereum.Value.fromAddress(_receiver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemUnderlying(
    _pool: Address,
    _amount: BigInt,
    _receiver: Address
  ): BigInt {
    let result = super.call(
      "redeemUnderlying",
      "redeemUnderlying(address,int256,address):(int256)",
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromSignedBigInt(_amount),
        ethereum.Value.fromAddress(_receiver)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeemUnderlying(
    _pool: Address,
    _amount: BigInt,
    _receiver: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemUnderlying",
      "redeemUnderlying(address,int256,address):(int256)",
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromSignedBigInt(_amount),
        ethereum.Value.fromAddress(_receiver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  repay(_pool: Address, _amount: BigInt, _for: Address): BigInt {
    let result = super.call("repay", "repay(address,int256,address):(int256)", [
      ethereum.Value.fromAddress(_pool),
      ethereum.Value.fromSignedBigInt(_amount),
      ethereum.Value.fromAddress(_for)
    ]);

    return result[0].toBigInt();
  }

  try_repay(
    _pool: Address,
    _amount: BigInt,
    _for: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "repay",
      "repay(address,int256,address):(int256)",
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromSignedBigInt(_amount),
        ethereum.Value.fromAddress(_for)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidate(
    _pool: Address,
    _for: Address,
    _amount: BigInt,
    _receiver: Address,
    uPosition: boolean
  ): BigInt {
    let result = super.call(
      "liquidate",
      "liquidate(address,address,int256,address,bool):(int256)",
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromAddress(_for),
        ethereum.Value.fromSignedBigInt(_amount),
        ethereum.Value.fromAddress(_receiver),
        ethereum.Value.fromBoolean(uPosition)
      ]
    );

    return result[0].toBigInt();
  }

  try_liquidate(
    _pool: Address,
    _for: Address,
    _amount: BigInt,
    _receiver: Address,
    uPosition: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidate",
      "liquidate(address,address,int256,address,bool):(int256)",
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromAddress(_for),
        ethereum.Value.fromSignedBigInt(_amount),
        ethereum.Value.fromAddress(_receiver),
        ethereum.Value.fromBoolean(uPosition)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidateMulti(
    _pool: Address,
    _nftIDs: Array<BigInt>,
    _amounts: Array<BigInt>,
    _receiver: Address,
    uPosition: boolean
  ): BigInt {
    let result = super.call(
      "liquidateMulti",
      "liquidateMulti(address,uint256[],int256[],address,bool):(int256)",
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigIntArray(_nftIDs),
        ethereum.Value.fromSignedBigIntArray(_amounts),
        ethereum.Value.fromAddress(_receiver),
        ethereum.Value.fromBoolean(uPosition)
      ]
    );

    return result[0].toBigInt();
  }

  try_liquidateMulti(
    _pool: Address,
    _nftIDs: Array<BigInt>,
    _amounts: Array<BigInt>,
    _receiver: Address,
    uPosition: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidateMulti",
      "liquidateMulti(address,uint256[],int256[],address,bool):(int256)",
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigIntArray(_nftIDs),
        ethereum.Value.fromSignedBigIntArray(_amounts),
        ethereum.Value.fromAddress(_receiver),
        ethereum.Value.fromBoolean(uPosition)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createPool(_tokenA: Address, _tokenB: Address): Address {
    let result = super.call(
      "createPool",
      "createPool(address,address):(address)",
      [ethereum.Value.fromAddress(_tokenA), ethereum.Value.fromAddress(_tokenB)]
    );

    return result[0].toAddress();
  }

  try_createPool(
    _tokenA: Address,
    _tokenB: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createPool",
      "createPool(address,address):(address)",
      [ethereum.Value.fromAddress(_tokenA), ethereum.Value.fromAddress(_tokenB)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _poolMasterAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class SetDefaultMarketConfigCall extends ethereum.Call {
  get inputs(): SetDefaultMarketConfigCall__Inputs {
    return new SetDefaultMarketConfigCall__Inputs(this);
  }

  get outputs(): SetDefaultMarketConfigCall__Outputs {
    return new SetDefaultMarketConfigCall__Outputs(this);
  }
}

export class SetDefaultMarketConfigCall__Inputs {
  _call: SetDefaultMarketConfigCall;

  constructor(call: SetDefaultMarketConfigCall) {
    this._call = call;
  }

  get _ltv(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _lb(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _rf(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class SetDefaultMarketConfigCall__Outputs {
  _call: SetDefaultMarketConfigCall;

  constructor(call: SetDefaultMarketConfigCall) {
    this._call = call;
  }
}

export class SetPoolLTVCall extends ethereum.Call {
  get inputs(): SetPoolLTVCall__Inputs {
    return new SetPoolLTVCall__Inputs(this);
  }

  get outputs(): SetPoolLTVCall__Outputs {
    return new SetPoolLTVCall__Outputs(this);
  }
}

export class SetPoolLTVCall__Inputs {
  _call: SetPoolLTVCall;

  constructor(call: SetPoolLTVCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _number(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SetPoolLTVCall__Outputs {
  _call: SetPoolLTVCall;

  constructor(call: SetPoolLTVCall) {
    this._call = call;
  }
}

export class SetPoolLBCall extends ethereum.Call {
  get inputs(): SetPoolLBCall__Inputs {
    return new SetPoolLBCall__Inputs(this);
  }

  get outputs(): SetPoolLBCall__Outputs {
    return new SetPoolLBCall__Outputs(this);
  }
}

export class SetPoolLBCall__Inputs {
  _call: SetPoolLBCall;

  constructor(call: SetPoolLBCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _number(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SetPoolLBCall__Outputs {
  _call: SetPoolLBCall;

  constructor(call: SetPoolLBCall) {
    this._call = call;
  }
}

export class SetPoolRFCall extends ethereum.Call {
  get inputs(): SetPoolRFCall__Inputs {
    return new SetPoolRFCall__Inputs(this);
  }

  get outputs(): SetPoolRFCall__Outputs {
    return new SetPoolRFCall__Outputs(this);
  }
}

export class SetPoolRFCall__Inputs {
  _call: SetPoolRFCall;

  constructor(call: SetPoolRFCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _number(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SetPoolRFCall__Outputs {
  _call: SetPoolRFCall;

  constructor(call: SetPoolRFCall) {
    this._call = call;
  }
}

export class SetPoolInterestRateAddressCall extends ethereum.Call {
  get inputs(): SetPoolInterestRateAddressCall__Inputs {
    return new SetPoolInterestRateAddressCall__Inputs(this);
  }

  get outputs(): SetPoolInterestRateAddressCall__Outputs {
    return new SetPoolInterestRateAddressCall__Outputs(this);
  }
}

export class SetPoolInterestRateAddressCall__Inputs {
  _call: SetPoolInterestRateAddressCall;

  constructor(call: SetPoolInterestRateAddressCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _address(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetPoolInterestRateAddressCall__Outputs {
  _call: SetPoolInterestRateAddressCall;

  constructor(call: SetPoolInterestRateAddressCall) {
    this._call = call;
  }
}

export class SetDefaultInterestRateAddressCall extends ethereum.Call {
  get inputs(): SetDefaultInterestRateAddressCall__Inputs {
    return new SetDefaultInterestRateAddressCall__Inputs(this);
  }

  get outputs(): SetDefaultInterestRateAddressCall__Outputs {
    return new SetDefaultInterestRateAddressCall__Outputs(this);
  }
}

export class SetDefaultInterestRateAddressCall__Inputs {
  _call: SetDefaultInterestRateAddressCall;

  constructor(call: SetDefaultInterestRateAddressCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDefaultInterestRateAddressCall__Outputs {
  _call: SetDefaultInterestRateAddressCall;

  constructor(call: SetDefaultInterestRateAddressCall) {
    this._call = call;
  }
}

export class SetGovernorCall extends ethereum.Call {
  get inputs(): SetGovernorCall__Inputs {
    return new SetGovernorCall__Inputs(this);
  }

  get outputs(): SetGovernorCall__Outputs {
    return new SetGovernorCall__Outputs(this);
  }
}

export class SetGovernorCall__Inputs {
  _call: SetGovernorCall;

  constructor(call: SetGovernorCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGovernorCall__Outputs {
  _call: SetGovernorCall;

  constructor(call: SetGovernorCall) {
    this._call = call;
  }
}

export class SetPositionAddressCall extends ethereum.Call {
  get inputs(): SetPositionAddressCall__Inputs {
    return new SetPositionAddressCall__Inputs(this);
  }

  get outputs(): SetPositionAddressCall__Outputs {
    return new SetPositionAddressCall__Outputs(this);
  }
}

export class SetPositionAddressCall__Inputs {
  _call: SetPositionAddressCall;

  constructor(call: SetPositionAddressCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPositionAddressCall__Outputs {
  _call: SetPositionAddressCall;

  constructor(call: SetPositionAddressCall) {
    this._call = call;
  }
}

export class SetOracleAddressCall extends ethereum.Call {
  get inputs(): SetOracleAddressCall__Inputs {
    return new SetOracleAddressCall__Inputs(this);
  }

  get outputs(): SetOracleAddressCall__Outputs {
    return new SetOracleAddressCall__Outputs(this);
  }
}

export class SetOracleAddressCall__Inputs {
  _call: SetOracleAddressCall;

  constructor(call: SetOracleAddressCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOracleAddressCall__Outputs {
  _call: SetOracleAddressCall;

  constructor(call: SetOracleAddressCall) {
    this._call = call;
  }
}

export class SetDistributorAddressCall extends ethereum.Call {
  get inputs(): SetDistributorAddressCall__Inputs {
    return new SetDistributorAddressCall__Inputs(this);
  }

  get outputs(): SetDistributorAddressCall__Outputs {
    return new SetDistributorAddressCall__Outputs(this);
  }
}

export class SetDistributorAddressCall__Inputs {
  _call: SetDistributorAddressCall;

  constructor(call: SetDistributorAddressCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDistributorAddressCall__Outputs {
  _call: SetDistributorAddressCall;

  constructor(call: SetDistributorAddressCall) {
    this._call = call;
  }
}

export class SetFlashLoanFeesInBipsCall extends ethereum.Call {
  get inputs(): SetFlashLoanFeesInBipsCall__Inputs {
    return new SetFlashLoanFeesInBipsCall__Inputs(this);
  }

  get outputs(): SetFlashLoanFeesInBipsCall__Outputs {
    return new SetFlashLoanFeesInBipsCall__Outputs(this);
  }
}

export class SetFlashLoanFeesInBipsCall__Inputs {
  _call: SetFlashLoanFeesInBipsCall;

  constructor(call: SetFlashLoanFeesInBipsCall) {
    this._call = call;
  }

  get _newFeeTotal(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newFeeProtocol(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetFlashLoanFeesInBipsCall__Outputs {
  _call: SetFlashLoanFeesInBipsCall;

  constructor(call: SetFlashLoanFeesInBipsCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class FlashLoanCall extends ethereum.Call {
  get inputs(): FlashLoanCall__Inputs {
    return new FlashLoanCall__Inputs(this);
  }

  get outputs(): FlashLoanCall__Outputs {
    return new FlashLoanCall__Outputs(this);
  }
}

export class FlashLoanCall__Inputs {
  _call: FlashLoanCall;

  constructor(call: FlashLoanCall) {
    this._call = call;
  }

  get _receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _pool(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _params(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class FlashLoanCall__Outputs {
  _call: FlashLoanCall;

  constructor(call: FlashLoanCall) {
    this._call = call;
  }
}

export class LendCall extends ethereum.Call {
  get inputs(): LendCall__Inputs {
    return new LendCall__Inputs(this);
  }

  get outputs(): LendCall__Outputs {
    return new LendCall__Outputs(this);
  }
}

export class LendCall__Inputs {
  _call: LendCall;

  constructor(call: LendCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LendCall__Outputs {
  _call: LendCall;

  constructor(call: LendCall) {
    this._call = call;
  }

  get mintedTokens(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token_amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _receiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get redeemTokens(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemUnderlyingCall extends ethereum.Call {
  get inputs(): RedeemUnderlyingCall__Inputs {
    return new RedeemUnderlyingCall__Inputs(this);
  }

  get outputs(): RedeemUnderlyingCall__Outputs {
    return new RedeemUnderlyingCall__Outputs(this);
  }
}

export class RedeemUnderlyingCall__Inputs {
  _call: RedeemUnderlyingCall;

  constructor(call: RedeemUnderlyingCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _receiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RedeemUnderlyingCall__Outputs {
  _call: RedeemUnderlyingCall;

  constructor(call: RedeemUnderlyingCall) {
    this._call = call;
  }

  get _token_amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _collateral_amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _recipient(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _for(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get _retAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _for(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _receiver(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get uPosition(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get payAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidateMultiCall extends ethereum.Call {
  get inputs(): LiquidateMultiCall__Inputs {
    return new LiquidateMultiCall__Inputs(this);
  }

  get outputs(): LiquidateMultiCall__Outputs {
    return new LiquidateMultiCall__Outputs(this);
  }
}

export class LiquidateMultiCall__Inputs {
  _call: LiquidateMultiCall;

  constructor(call: LiquidateMultiCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nftIDs(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _receiver(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get uPosition(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class LiquidateMultiCall__Outputs {
  _call: LiquidateMultiCall;

  constructor(call: LiquidateMultiCall) {
    this._call = call;
  }

  get payAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get _tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
